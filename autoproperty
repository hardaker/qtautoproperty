#!/usr/bin/perl

use File::Temp qw/tempfile/;
use IO::File;
use Carp;
use strict;

my ($file) = @ARGV;

# output temporary file for replacing the full header
my ($headerH, $headerFilename) = tempfile(SUFFIX => ".h");

# and finally, the starting file to read in
my $inputH = new IO::File;
$inputH->open($file) || croak "can't open $file\n";

while(<$inputH>) {
    if (/(\s+)\/\/.*AUTO_/) {
	my $space = $1;
	my $originalLine = $_;
	$headerH->print($originalLine);

        # output temporary file for pulling out just the AUTO macros
	my ($cppInH, $cppInFilename) = tempfile(SUFFIX => ".h");

	# output temporary file for the remapped items
	my ($cppOutH, $cppOutFilename) = tempfile(SUFFIX => ".h");

	# create the header file
	my $line = $_;
	$line =~ s/^\s*\/\///;
	$cppInH->print("#include \"auto_getsettools.h\"\n");
	$cppInH->print("$line");
	$cppInH->close();

	# run cpp on it
	$cppOutH->close();
	system("g++ -I. -E -o $cppOutFilename $cppInFilename");
#	system("$(CXX) -E $(CXXFLAGS) $(INCPATH) -o ShadowImageSource_def.h ../shadowblender/ShadowImageSource_in.h

	# now copy the results back out and print to the output header
	$cppOutH->open($cppOutFilename) || croak "Can't read back in $cppOutFilename";
	while(<$cppOutH>) {
	    next if (/^#/);
	    next if (/^\s*$/);
	    $headerH->print("$space/* AGST */ $_");
	}

	# clean up
	$cppOutH->close();
	unlink($cppInFilename);
	unlink($cppOutFilename);
    } else {
	next if (/^\s*\/\* AGST \*\//);
	$headerH->print($_);
    }
}

$inputH->close();

# replace the original file
system("cp $headerFilename $file\n");
unlink($headerFilename);
